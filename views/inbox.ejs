<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="author" content="Sumit Saha" />
    <meta name="owner" content="learnwithsumit.com" />
    <title><%= title %></title>
    <link rel="shortcut icon" href="./images/favicon.png" />
    <link rel="stylesheet" href="./stylesheets/toastify.css" />
    <link rel="stylesheet" href="./stylesheets/style.css" />
    <script src="./js/toastify.js"></script>
    <script src="./js/moment.js"></script>
  </head>
  <body>
    <div class="menu">
      <% if (loggedInUser && loggedInUser.username) { %>
      <div class="menu-item"><a href="/inbox">Inbox</a></div>
      <div class="menu-item"><a href="/users">Users</a></div>
      <div class="menu-item">
        <% if (loggedInUser && loggedInUser.avatar) { %>
        <img
          src="./uploads/avatars/<%= loggedInUser.avatar %>"
          alt="<%= loggedInUser.name %>"
        />
        <% } else { %>
        <img src="./images/nophoto.png" alt="<%= loggedInUser.name %>" />
        <% } %>
        <a href="#" onclick="logout()">Logout</a>
      </div>
      <% } else { %>
      <div class="menu-item"><a href="/inbox">Inbox</a></div>
      <div class="menu-item"><a href="/users">Users</a></div>
      <div class="menu-item"><a href="/">Login</a></div>
      <% } %>
    </div>
    <div id="chat-container">
      <div id="search-container">
        <input type="text" placeholder="Search" />
      </div>
      <div id="conversation-list">
        <% data.forEach(function(conversation) { %>
        <!-- conversation creator is same to logged in user, so we need to show participant name and avatar -->
        <% if(conversation.creator.id == loggedInUser.userid) { %>
        <div
          class="conversation"
          onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>')"
        >
          <% if (conversation.participant.avatar) { %>
          <img
            src="./uploads/avatars/<%= conversation.participant.avatar %>"
            alt="<%= conversation.participant.name %>"
          />
          <% } else { %>
          <img src="./images/nophoto.png" />
          <% } %>
          <div class="title-text"><%= conversation.participant.name %></div>
          <div class="conversation-date">
            <%= moment(conversation.last_updated).fromNow() %>
          </div>
        </div>
        <% } else { %>
        <div
          class="conversation"
          onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.name %>')"
        >
          <% if (conversation.creator.avatar) { %>
          <img
            src="./uploads/avatars/<%= conversation.creator.avatar %>"
            alt="<%= conversation.creator.name %>"
          />
          <% } else { %>
          <img src="./images/nophoto.png" />
          <% } %>
          <div class="title-text"><%= conversation.creator.name %></div>
          <div class="conversation-date">
            <%= moment(conversation.last_updated).fromNow() %>
          </div>
        </div>
        <% } %> <% }); %>

        <!-- show no conversation placeholder image for 0 conversations -->
        <% if(data && data.length === 0) { %>
        <div class="nothing"><img src="./images/no-conversation.svg" /></div>
        <% } %>
      </div>

      <div class="new-message-container" onclick="openModal()">
        <a href="#">+</a>
      </div>

      <div id="chat-title">
        <span id="conversation-partner"></span>
        <img src="./images/trash.png" alt="Delete Conversation" />
      </div>

      <!-- placeholder div if no messages are in messages area -->
      <div id="chat-message-list">
        <div class="nothing">select a conversation</div>
      </div>

      <!-- send message form -->
      <form id="chat-form" method="post" enctype="multipart/form-data">
        <label for="attachment"
          ><img src="./images/attachment.png" alt="Add Attachment"
        /></label>
        <input
          type="file"
          multiple
          name="attachment"
          class="hide"
          id="attachment"
        />
        <input
          type="text"
          name="message"
          placeholder="Type a message"
          autocomplete="off"
        />
      </form>
    </div>

    div class="modal-wrapper" id="add-conversation-modal">
    <div class="modal">
      <a onclick="closeModal()" class="modal-close">+</a>
      <div class="modal-title">
        <h2>Create New Conversation</h2>
      </div>
      <div class="modal-body">
        <form id="add-conversation-form">
          <input
            type="text"
            placeholder="search user by name or email or mobile"
            name="user"
            id="user"
            autocomplete="off"
          />
          <p class="error"></p>
          <div class="search_users"></div>
          <input type="submit" value="Submit" class="hide" />
        </form>
      </div>
    </div>
  </div>

    <!-- import socket io client from cdn -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>

    <script>
      // toast in lopg in log out
      const logoutToast = Toastify({
        text: "You are being logged out...",
        duration: 1000,
      });
      function logout() {
        fetch("/", {
          method: "DELETE",
        });
        logoutToast.showToast();
        setTimeout(() => {
          window.location.replace("/");
        }, 1000);
      }
      //add conversation form model
      const modal = document.querySelector("#add-conversation-modal");
  // typing detector
  let typingTimer;
  const doneTypingInterval = 500;
  const input = document.querySelector("input#user");
  const conversation_list = document.querySelector("#conversation-list");
  let users_placeholder = document.querySelector(".search_users");
  // conversation created failure toast
  const conversationFailureToast = Toastify({
    text: "Error creating a conversation!",
    duration: 1000,
  });
  function closeModal() {
    modal.style.display = "none";
    // reset
    users_placeholder.style.display = "none";
    input.value = "";
  }
  function openModal() {
    modal.style.display = "block";
  }
  //on keyup, start the countdown
  input.addEventListener("keyup", function () {
    clearTimeout(typingTimer);
    // reset
    users_placeholder.style.display = "none";
    if (input.value) {
      typingTimer = setTimeout(searchUsers, doneTypingInterval); //user is "finished typing," send search request
    }
  });
  //on keydown, clear the countdown
  input.addEventListener("keydown", function () {
    clearTimeout(typingTimer);
  });
  // send request for search
  async function searchUsers() {
    let response = await fetch("/inbox/search", {
      method: "POST",
      body: JSON.stringify({
        user: input.value,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    });
    // get response
    let result = await response.json();
    // handle error and response
    if (result.errors) {
      const errorplaceholder = document.querySelector("p.error");
      errorplaceholder.textContent = result.errors.common.msg;
      errorplaceholder.style.display = "block";
    } else {
      if (result.length > 0) {
        let generatedHtml = "<ul>";
        result.forEach((user) => {
          const avatar = user.avatar
            ? "./uploads/avatars/" + user.avatar
            : "./images/nophoto.png";
          generatedHtml += `<li onclick="createConversation('${user._id}', '${user.name}', '${user.avatar}')">
              <div class="user">
                <div class="avatar">
                  <img src="${avatar}" />
                </div>
                <div class="username">${user.name}</div>
              </div>
            </li>`;
        });
        generatedHtml += "</ul>";
        users_placeholder.innerHTML = generatedHtml;
        users_placeholder.style.display = "block";
      }
    }
  }
  // create Conversation
  async function createConversation(participant_id, name, avatar) {
    try {
      const response = await fetch("/inbox/conversation", {
        method: "POST",
        body: JSON.stringify({
          participant: name,
          id: participant_id,
          avatar: avatar != "undefined" ? avatar : null,
        }),
        headers: {
          "Content-type": "application/json; charset=UTF-8",
        },
      });
      const result = response.json();
      if (!result.errors) {
        // reset
        users_placeholder.style.display = "none";
        input.value = name;
        // reload the page after 1 second
        setTimeout(() => {
          location.reload();
        }, 1000);
      } else {
        throw new Error(result.errors.common.msg);
      }
    } catch (err) {
      conversationFailureToast.showToast();
    }
  }

//chat javascript form
      const form = document.querySelector("#chat-form");
      const messageContainer = document.querySelector("#chat-message-list");
      const chatTitleContainer = document.querySelector(
        "#conversation-partner"
      );
      const loggedinUserId = "<%= loggedInUser.userid %>";
      const loggedinUserName = "<%= loggedInUser.username %>";
      let participant = null; // selected conversation participant object
      let current_conversation_id; // selected conversation id

      // socket initialization
      const socket = io("<%= process.env.APP_URL %>");

      // handle new/live incoming message from socket
      socket.on("new_message", (data) => {
        // only respond if current conversation is open in any client
        if (data.message.conversation_id == current_conversation_id) {
          // message class
          const messageClass =
            data.message.sender.id === loggedinUserId
              ? "you-message"
              : "other-message";

          const senderAvatar = data.message.sender.avatar
            ? `<img src="./uploads/avatars/${data.message.sender.avatar}" alt="${data.message.sender.name}" />`
            : `<img src="./images/nophoto.png" alt="${data.message.sender.name}" />`;

          // message attachments
          let attachments = '<div class="attachments">';

          if (data.message.attachment && data.message.attachment.length > 0) {
            data.message.attachment.forEach((attachment) => {
              attachments += `<img src="./uploads/attachments/${attachment}" /> `;
            });
          }

          attachments += "</div>";

          let messageHTML;

          // do not show avatar for loggedin user
          if (data.message.sender.id == loggedinUserId) {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(
                data.message.date_time
              ).fromNow()}</div>
            </div></div>`;
          } else {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              ${senderAvatar}
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(
                data.message.date_time
              ).fromNow()}</div>
            </div></div>`;
          }

          // append the inoming message to message area as last item
          document
            .querySelector("#chat-message-list > .message-row:first-child")
            .insertAdjacentHTML("beforeBegin", messageHTML);
        }
      });

      // get messages of a conversation
      async function getMessages(conversation_id, current_conversation_name) {
        // messages failure toast
        const messagesFailureToast = Toastify({
          text: "Error loading messages!",
          duration: 1000,
        });

        let response = await fetch(`/inbox/messages/${conversation_id}`);
        const result = await response.json();

        if (!result.errors && result.data) {
          form.style.visibility = "visible";

          const { data, user, conversation_id } = result;

          participant = data.participant;
          current_conversation_id = conversation_id;

          if (data.messages) {
            let allMessages = "";

            if (data.messages.length > 0) {
              data.messages.forEach((message) => {
                let senderAvatar = message.sender.avatar
                  ? `./uploads/avatars/${message.sender.avatar}`
                  : "./images/nophoto.png";
                const messageClass =
                  message.sender.id === loggedinUserId
                    ? "you-message"
                    : "other-message";
                const showAvatar =
                  message.sender.id === loggedinUserId
                    ? ""
                    : `<img src="${senderAvatar}" alt="${message.sender.name}" />`;

                // message attachments
                let attachments = '<div class="attachments">';

                if (message.attachment && message.attachment.length > 0) {
                  message.attachment.forEach((attachment) => {
                    attachments += `<img src="./uploads/attachments/${attachment}" /> `;
                  });
                }

                attachments += "</div>";

                // final message html
                let messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
                      ${showAvatar}
                      <div class="message-text">${message.text}</div>
                      ${attachments}
                      <div class="message-time">${moment(
                        message.date_time
                      ).fromNow()}</div>
                    </div></div>`;

                allMessages += messageHTML;
                messageContainer.innerHTML = allMessages;
              });
            } else if (data.messages.length === 0) {
              messageContainer.innerHTML = '<div class="message-row"></div>';
            }

            chatTitleContainer.textContent = current_conversation_name;
          }
        } else {
          messagesFailureToast.showToast();
        }
      }

      // message sending
      form.onsubmit = async function (event) {
        event.preventDefault();

        const sendMessageFailureToast = Toastify({
          text: "Error sending message",
          duration: 1000,
        });

        // prepare the form data
        const formData = new FormData(form);
        formData.append("receiverId", participant.id);
        formData.append("receiverName", participant.name);
        formData.append("avatar", participant.avatar || "");
        formData.append("conversationId", current_conversation_id);

        // send the request to server
        let response = await fetch("/inbox/message", {
          method: "POST",
          body: formData,
        });

        // get response
        let result = await response.json();

        if (!result.errors) {
          form.reset(); // reset the form
        } else {
          sendMessageFailureToast.showToast();
        }
      };
    </script>
  </body>
</html>
